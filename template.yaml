AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  punbots

  SAM Template for punbots. 
  Creates 4 lambdas, 4 dynamoTables and 3 streams.
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Handler: index.handler
    Runtime: nodejs12.x

Resources:
  PunVoteFunction:
    Description: Basic bot entry point. It records puns and Votes in DynamoDB, and some queries
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: punvote/      
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PunsVotesTable
        - DynamoDBReadPolicy:
            TableName: !Ref MonthlyScoresTable
        - DynamoDBReadPolicy:
            TableName: !Ref LifetimeScoresTable
      Environment:
        Variables:
          VOTES_TABLE_NAME: !Ref PunsVotesTable
          MONTHLY_SCORES_TABLE_NAME: !Ref MonthlyScoresTable
          LIFE_SCORES_TABLE_NAME: !Ref LifetimeScoresTable
      Events:
        PunVote:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /punbot
            Method: post

  ScoresMonthlyFunction:
    Description: listens on pun stream, aggregates pun scores in monthly averages
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: punsmonthly/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MonthlyScoresTable
      Environment:
        Variables:
          TABLE_NAME: !Ref MonthlyScoresTable
      Events:  
        VoteStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt PunsVotesTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
            MaximumRetryAttempts: 2
            MaximumBatchingWindowInSeconds: 20
            BisectBatchOnFunctionError: false
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt OhSnapDLQ.Arn
            StartingPosition: TRIM_HORIZON

  ScoresEverFunction:
    Description: listen on monthly stream, aggregates monthly scores into lifetime scores
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: punsforever/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LifetimeScoresTable
      Environment:
        Variables:
          TABLE_NAME: !Ref LifetimeScoresTable
      Events:  
        VoteStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MonthlyScoresTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
            MaximumRetryAttempts: 2
            MaximumBatchingWindowInSeconds: 20
            BisectBatchOnFunctionError: false
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt OhSnapDLQ.Arn
            StartingPosition: TRIM_HORIZON        

  PunsVotesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: pk #chan_author
          AttributeType: S
        - AttributeName: sk #msg_id
          AttributeType: S
      KeySchema:
        - AttributeName: pk #chan_author
          KeyType: HASH
        - AttributeName: sk #msg_id
          KeyType: RANGE      
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        # gsi_author_top10 =    {pk:"chan_author", sk:"date-punId"}
        - IndexName: AuthorsTop10
          KeySchema:
            - AttributeName: chan_author
              KeyType: HASH
            - AttributeName: score
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - text
              - msg_id
            ProjectionType: INCLUDE
        # gsi_top10_ever = {pk: "chan",sk:"score"}      
        - IndexName: Top10Ever
          KeySchema:
            - AttributeName: chan
              KeyType: HASH
            - AttributeName: score
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - text
              - chan_author
              - msg_id
            ProjectionType: INCLUDE
        # gsi_top10_mo = {pk: "chan_date",sk:"score"}
        - IndexName: Top10month
          KeySchema:
            - AttributeName: chan_mo
              KeyType: HASH
            - AttributeName: score
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - text
              - chan_author
              - msg_id
            ProjectionType: INCLUDE
      StreamSpecification:
        StreamViewType: NEW_IMAGE

      
  # {
  #   pk: chan_yymm
  #   authors : {
  #     author_id:{
  #       avg:number,
  #       punsScores: { punId:number }
  #       }
  #   }
  # }
  MonthlyScoresTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk #chan_mo
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  
  # { pk: chan,
  #   authors:{
  #     author_id:{
  #       avg:number,
  #       yymm:number
  #     }
  #   }
  # }
  LifetimeScoresTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk #chan
          AttributeType: S
      KeySchema:
        - AttributeName: pk #chan_author
          KeyType: HASH      

  OhSnapDLQ:
    Type: 'AWS::SQS::Queue'

    
  
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PunVoteApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  PunVoteFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt PunVoteFunction.Arn
  PunVoteFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt PunVoteFunctionRole.Arn
